#include <WiFi.h>
#include <WiFiUdp.h>
#include <Adafruit_GFX.h>   
#include <P3RGB64x32MatrixPanel.h>
#include <time.h>
//#include <NTPClient.h>
//#include <Fonts/FreeSans9pt7b.h>
//#include <Fonts/GodoM6pt8b.h>

// Replace with your network credentials (STATION)
const char* ntpServer = "pool.ntp.org";
uint8_t timeZone = 9;
uint8_t summerTime = 0;
const char* ssid = "itime";
const char* password = "daon7521";
P3RGB64x32MatrixPanel matrix(25, 26, 27, 21, 22, 0, 15, 32, 33, 12, 5, 23, 4);
unsigned long previousMillis = 0;
unsigned long interval = 30000;
char packetBuffer[60];
int Year;
int Month;
int Day;
int Hour;
int Min;
WiFiUDP Udp;

TaskHandle_t thWork;
String formattedDate;

String* Split(String sData, char cSeparator, int* scnt)
{  
  static String charr[17] = { "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"}; 
  int nCount = 0;
  int nGetIndex = 0 ;
 
  //임시저장
  String sTemp = "";
 
  //원본 복사
  String sCopy = sData;
 
  while(true)
  {
    //구분자 찾기
    nGetIndex = sCopy.indexOf(cSeparator);
    
    if ((sData.length()-1) == nGetIndex) break;
    //리턴된 인덱스가 있나?
    if(-1 != nGetIndex)
    {
      //있다.
 
      //데이터 넣고
      sTemp = sCopy.substring(0, nGetIndex);
 
      //Serial.println( sTemp );
    
      //뺀 데이터 만큼 잘라낸다.
      sCopy = sCopy.substring(nGetIndex + 1);
      if (nGetIndex == 0) continue;
      charr[nCount] = sTemp;
    }
    else
    {
      //없으면 마무리 한다.
      //Serial.println( sCopy );
      charr[nCount] = sCopy;
      break;
    }
 
    //다음 문자로~
    ++nCount;
  }
  //Serial.println("문자갯수:" + String(nCount));
  *scnt = nCount;
  return charr;
}

void initLED()
{
  // matrix와 폰트 설정
  matrix.begin();
  //matrix.setFont(&GodoM6pt8b);  
  //matrix.setFont(&FreeSans9pt7b);
  matrix.setFont();
  matrix.setTextSize(1);     // size 1 == 8 pixels high
  matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
  matrix.setAttribute(UTF8_ENABLE , true);
  matrix.setTextColor(matrix.color444(15, 9, 12));
  matrix.fillScreen(0); // 화면 클리어
}

void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void PrintLED(String m1, String m2)
{
  matrix.fillScreen(0); // 화면 클리어
  //matrix.fillRect(2, 2, 60, 10, 0);
  //matrix.fillRect(27, 12, 35, 19, 0);
  matrix.setCursor(3, 13);
  matrix.setTextColor(matrix.color444(100,30, 0));
  matrix.print("temp");

  matrix.setCursor(30, 13);
  matrix.setTextColor(matrix.color444(15, 9, 12));
  String sTemp = m1 + "C";
  matrix.print(sTemp.c_str());

  matrix.setCursor(3, 23);
  matrix.setTextColor(matrix.color444(0,3, 150));
  matrix.print("humi");

  matrix.setCursor(30, 23);
  matrix.setTextColor(matrix.color444(15, 9, 12));
  String sHum = m2 + "%";
  matrix.print(sHum.c_str());

  matrix.setCursor(1, 3);
  matrix.setTextColor(matrix.color444(255,0,0));
  //String strtim = String(Month) + "-" + String(Day) + " " + String(Hour) + ":" + String(Min);
  matrix.printf("%02d/%02d", Month, Day);  

  matrix.setCursor(34, 3);
  matrix.printf("%02d:%02d", Hour, Day);
}
void printLocalTime() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Year = timeinfo.tm_year + 1900;
  Month = timeinfo.tm_mon + 1;
  Day = timeinfo.tm_mday;
  Hour = timeinfo.tm_hour;
  Min = timeinfo.tm_min;
  String strtim = String(Year) + "-" + String(Month) + "-" + String(Day) + " " + String(Hour) + ":" + String(Min);
  Serial.println(strtim);

  
  //Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

void timeWork(void *para)
{
  while (true)
  {
    printLocalTime();
    delay(10000);
  }
}
void setup() {
  Serial.begin(115200);
  initWiFi();
  Serial.print("RSSI: ");
  Serial.println(WiFi.RSSI());
  initLED();
  
  configTime(3600 * timeZone, 3600 * summerTime, ntpServer);
  printLocalTime();
  Udp.begin(11000);

  xTaskCreatePinnedToCore(timeWork, "timeWork",10000,NULL, 0, &thWork, 0);
}

void loop() {
  
  unsigned long currentMillis = millis();
  // if WiFi is down, try reconnecting every CHECK_WIFI_TIME seconds
  if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >=interval)) {
    Serial.print(millis());
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    WiFi.reconnect();
    previousMillis = currentMillis;
  }
  
  
  
  int packetSize = Udp.parsePacket();
  if (packetSize > 0)
  {
    Serial.print("Receive Size:");
    Serial.println(packetSize);
    int len = Udp.read(packetBuffer, 50);
    if (len > 0)
    {
      int cnt = 0;
      packetBuffer[len] = 0;
      Serial.print("Message:");
      Serial.println(packetBuffer);
      String* rStr = Split(packetBuffer, '&', &cnt);
      if (cnt >= 2)
      {
        PrintLED(rStr[0], rStr[1]);
      }
      
    }
  }
  //PrintLED(String(18.1), String(35.4));
}
